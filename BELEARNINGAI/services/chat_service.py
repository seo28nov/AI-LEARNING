"""D·ªãch v·ª• chat AI v·ªõi Google GenAI v√† RAG."""
import json
import logging
from datetime import datetime, timezone
from typing import List, Optional, Dict

from fastapi import HTTPException, status
import google.generativeai as genai

from config.config import get_settings
from models.models import (
    ChatDocument,
    UserDocument,
    CourseDocument,
    UploadDocument
)
from services.course_indexing_service import course_indexing_service

logger = logging.getLogger(__name__)
settings = get_settings()


async def create_chat_session(
    user_id: str,
    course_id: Optional[str] = None,
    title: str = "New Chat"
) -> dict:
    """T·∫°o phi√™n chat m·ªõi.
    
    Args:
        user_id: ID ng∆∞·ªùi d√πng
        course_id: ID kh√≥a h·ªçc (n·∫øu chat v·ªÅ kh√≥a h·ªçc c·ª• th·ªÉ)
        title: Ti√™u ƒë·ªÅ chat
        
    Returns:
        Th√¥ng tin session
    """
    # Ki·ªÉm tra user
    user = await UserDocument.get(user_id)
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"
        )
    
    # N·∫øu c√≥ course_id, ki·ªÉm tra course
    if course_id:
        course = await CourseDocument.get(course_id)
        if course is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i"
            )
    
    now = datetime.now(timezone.utc)
    chat_doc = ChatDocument(
        user_id=user_id,
        course_id=course_id,
        title=title,
        messages=[],
        created_at=now,
        updated_at=now
    )
    
    await chat_doc.insert()
    
    return {
        "id": str(chat_doc.id),
        "user_id": chat_doc.user_id,
        "course_id": chat_doc.course_id,
        "title": chat_doc.title,
        "created_at": chat_doc.created_at
    }


async def send_message(
    session_id: str,
    user_id: str,
    message: str,
    use_rag: bool = False
) -> dict:
    """G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ AI.
    
    V·ªõi RAG enabled, AI s·∫Ω s·ª≠ d·ª•ng n·ªôi dung t·ª´ course ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n.
    
    Args:
        session_id: ID phi√™n chat
        user_id: ID ng∆∞·ªùi d√πng
        message: N·ªôi dung tin nh·∫Øn
        use_rag: S·ª≠ d·ª•ng RAG v·ªõi course content (vector search)
        
    Returns:
        Tin nh·∫Øn v√† ph·∫£n h·ªìi t·ª´ AI
    """
    try:
        # L·∫•y chat session
        chat = await ChatDocument.get(session_id)
        if chat is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Chat session kh√¥ng t·ªìn t·∫°i"
            )
        
        # Ki·ªÉm tra quy·ªÅn
        if chat.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p chat n√†y"
            )
        
        # Th√™m tin nh·∫Øn user v√†o history
        user_message = {
            "role": "user",
            "content": message,
            "timestamp": datetime.now(timezone.utc)
        }
        
        # T·∫°o context cho AI (v·ªõi RAG n·∫øu enabled)
        context = await build_context(chat, use_rag, user_id, message)
        
        # G·ªçi AI ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
        ai_response = await generate_ai_response(message, context, chat.messages)
        
        # Th√™m ph·∫£n h·ªìi AI v√†o history
        ai_message = {
            "role": "assistant",
            "content": ai_response,
            "timestamp": datetime.now(timezone.utc)
        }
        
        # L∆∞u v√†o database
        chat.messages.append(user_message)
        chat.messages.append(ai_message)
        chat.updated_at = datetime.now(timezone.utc)
        await chat.save()
        
        logger.info(f"‚úÖ Chat message processed: session={session_id}, use_rag={use_rag}")
        
        return {
            "session_id": session_id,
            "user_message": user_message,
            "ai_message": ai_message
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå L·ªói send_message: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="L·ªói x·ª≠ l√Ω tin nh·∫Øn"
        )


async def build_context(
    chat: ChatDocument,
    use_rag: bool,
    user_id: str,
    user_message: str = ""
) -> str:
    """X√¢y d·ª±ng context cho AI.
    
    V·ªõi RAG enabled, s·ª≠ d·ª•ng vector search ƒë·ªÉ t√¨m relevant content t·ª´ course.
    
    Args:
        chat: Chat document
        use_rag: C√≥ s·ª≠ d·ª•ng RAG kh√¥ng
        user_id: ID ng∆∞·ªùi d√πng
        user_message: Tin nh·∫Øn c·ªßa user (ƒë·ªÉ search relevant content)
        
    Returns:
        Context string cho AI
    """
    context_parts = []
    
    try:
        # 1. N·∫øu chat v·ªÅ kh√≥a h·ªçc c·ª• th·ªÉ
        if chat.course_id:
            course = await CourseDocument.get(chat.course_id)
            if course:
                context_parts.append("=== TH√îNG TIN KH√ìA H·ªåC ===")
                context_parts.append(f"Kh√≥a h·ªçc: {course.title}")
                context_parts.append(f"M√¥ t·∫£: {course.description}")
                context_parts.append("")
                
                # 2. N·∫øu s·ª≠ d·ª•ng RAG - t√¨m relevant content b·∫±ng vector search
                if use_rag and user_message:
                    logger.info(f"üîç RAG: Searching relevant content for: '{user_message[:50]}...'")
                    
                    try:
                        # Search trong course content
                        search_results = await course_indexing_service.search_course_content(
                            query=user_message,
                            course_id=str(chat.course_id),
                            top_k=3  # L·∫•y top 3 relevant chunks
                        )
                        
                        if search_results:
                            context_parts.append("=== N·ªòI DUNG LI√äN QUAN ===")
                            for i, result in enumerate(search_results, 1):
                                context_parts.append(f"\n[ƒêo·∫°n {i}] {result['title']}")
                                context_parts.append(f"(ƒê·ªô li√™n quan: {result['score']:.2f})")
                                context_parts.append(result['text'])
                            context_parts.append("")
                            
                            logger.info(f"‚úÖ RAG: Found {len(search_results)} relevant chunks")
                        else:
                            logger.warning("‚ö†Ô∏è RAG: No relevant content found")
                            
                    except Exception as e:
                        logger.error(f"‚ùå RAG search error: {e}")
                        # Fallback: kh√¥ng d√πng RAG
                        context_parts.append("(Kh√¥ng t√¨m th·∫•y n·ªôi dung li√™n quan)")
                
                # 3. Fallback: Th√™m chapter info n·∫øu kh√¥ng d√πng RAG
                elif course.chapters:
                    context_parts.append("=== CH∆Ø∆†NG TR√åNH H·ªåC ===")
                    for i, chapter in enumerate(course.chapters[:5], 1):
                        context_parts.append(f"{i}. {chapter.title}")
                        if chapter.description:
                            context_parts.append(f"   {chapter.description[:100]}...")
                    context_parts.append("")
        
        # 4. Th√™m t√†i li·ªáu upload (n·∫øu user c√≥)
        uploads = await UploadDocument.find(
            UploadDocument.user_id == user_id
        ).limit(3).to_list()
        
        if uploads:
            context_parts.append("=== T√ÄI LI·ªÜU THAM KH·∫¢O ===")
            for upload in uploads:
                context_parts.append(f"- {upload.file_name}")
                if upload.extracted_text:
                    preview = upload.extracted_text[:300]
                    context_parts.append(f"  {preview}...")
            context_parts.append("")
        
        final_context = "\n".join(context_parts)
        
        logger.debug(f"üìù Context built: {len(final_context)} chars, RAG={use_rag}")
        
        return final_context
        
    except Exception as e:
        logger.error(f"‚ùå Error building context: {e}")
        return ""


async def generate_ai_response(
    message: str,
    context: str,
    history: List[Dict]
) -> str:
    """T·∫°o ph·∫£n h·ªìi t·ª´ Google GenAI.
    
    Args:
        message: Tin nh·∫Øn ng∆∞·ªùi d√πng
        context: Context t·ª´ kh√≥a h·ªçc/t√†i li·ªáu (v·ªõi RAG)
        history: L·ªãch s·ª≠ chat
        
    Returns:
        Ph·∫£n h·ªìi t·ª´ AI
    """
    if not settings.google_ai_api_key:
        logger.warning("‚ö†Ô∏è Google AI API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
        return "Xin l·ªói, AI service ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m GOOGLE_AI_API_KEY v√†o .env"
    
    try:
        genai.configure(api_key=settings.google_ai_api_key)
        model = genai.GenerativeModel("gemini-1.5-flash")
        
        # X√¢y d·ª±ng system prompt
        system_prompt = """B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh cho n·ªÅn t·∫£ng h·ªçc t·∫≠p tr·ª±c tuy·∫øn BeLearning.

NHI·ªÜM V·ª§:
- Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ kh√≥a h·ªçc, l·∫≠p tr√¨nh, v√† c√°c ch·ªß ƒë·ªÅ h·ªçc t·∫≠p
- Gi·∫£i th√≠ch kh√°i ni·ªám m·ªôt c√°ch d·ªÖ hi·ªÉu, c√≥ v√≠ d·ª• th·ª±c t·∫ø
- D·ª±a v√†o CONTEXT ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c
- N·∫øu th√¥ng tin trong CONTEXT, ∆∞u ti√™n s·ª≠ d·ª•ng n√≥
- N·∫øu kh√¥ng c√≥ trong CONTEXT, s·ª≠ d·ª•ng ki·∫øn th·ª©c chung
- ƒê·ªông vi√™n v√† h·ªó tr·ª£ ng∆∞·ªùi h·ªçc m·ªôt c√°ch th√¢n thi·ªán

QUY T·∫ÆC:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu
- ƒê∆∞a ra code examples khi ph√π h·ª£p
- Lu√¥n ki·ªÉm tra CONTEXT tr∆∞·ªõc khi tr·∫£ l·ªùi
- N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y th·ª´a nh·∫≠n v√† g·ª£i √Ω t√†i li·ªáu tham kh·∫£o
- Format c√¢u tr·∫£ l·ªùi ƒë·∫πp m·∫Øt v·ªõi markdown"""
        
        # Th√™m context n·∫øu c√≥
        if context:
            system_prompt += f"\n\n=== CONTEXT ===\n{context}\n=== END CONTEXT ==="
        
        # X√¢y d·ª±ng l·ªãch s·ª≠ chat (gi·ªõi h·∫°n 10 tin nh·∫Øn g·∫ßn nh·∫•t)
        chat_history = []
        recent_messages = history[-10:] if len(history) > 10 else history
        
        for msg in recent_messages:
            role = "user" if msg["role"] == "user" else "model"
            chat_history.append({
                "role": role,
                "parts": [msg["content"]]
            })
        
        # T·∫°o chat v·ªõi history
        chat = model.start_chat(history=chat_history)
        
        # G·ª≠i tin nh·∫Øn v·ªõi system prompt
        full_prompt = f"{system_prompt}\n\n=== QUESTION ===\n{message}"
        
        logger.info(f"ü§ñ Generating AI response (context: {len(context)} chars)")
        
        response = chat.send_message(full_prompt)
        
        logger.info(f"‚úÖ AI response generated ({len(response.text)} chars)")
        
        return response.text
        
    except Exception as e:
        logger.error(f"‚ùå Error generating AI response: {e}")
        return f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}"


async def get_chat_history(
    session_id: str,
    user_id: str
) -> dict:
    """L·∫•y l·ªãch s·ª≠ chat.
    
    Args:
        session_id: ID phi√™n chat
        user_id: ID ng∆∞·ªùi d√πng
        
    Returns:
        L·ªãch s·ª≠ chat
    """
    chat = await ChatDocument.get(session_id)
    if chat is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Chat session kh√¥ng t·ªìn t·∫°i"
        )
    
    # Ki·ªÉm tra quy·ªÅn
    if chat.user_id != user_id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p chat n√†y"
        )
    
    return {
        "id": str(chat.id),
        "title": chat.title,
        "course_id": chat.course_id,
        "messages": chat.messages,
        "created_at": chat.created_at,
        "updated_at": chat.updated_at
    }


async def list_user_chats(
    user_id: str,
    skip: int = 0,
    limit: int = 20
) -> tuple[List[dict], int]:
    """L·∫•y danh s√°ch chat sessions c·ªßa user.
    
    Args:
        user_id: ID ng∆∞·ªùi d√πng
        skip: B·ªè qua
        limit: Gi·ªõi h·∫°n
        
    Returns:
        Tuple (chats, total)
    """
    query = ChatDocument.find(ChatDocument.user_id == user_id)
    total = await query.count()
    chats = await query.sort(-ChatDocument.updated_at).skip(skip).limit(limit).to_list()
    
    chat_list = []
    for chat in chats:
        # L·∫•y tin nh·∫Øn cu·ªëi c√πng
        last_message = chat.messages[-1] if chat.messages else None
        
        chat_list.append({
            "id": str(chat.id),
            "title": chat.title,
            "course_id": chat.course_id,
            "message_count": len(chat.messages),
            "last_message": last_message,
            "created_at": chat.created_at,
            "updated_at": chat.updated_at
        })
    
    return chat_list, total


async def delete_chat_session(
    session_id: str,
    user_id: str
) -> bool:
    """X√≥a chat session.
    
    Args:
        session_id: ID phi√™n chat
        user_id: ID ng∆∞·ªùi d√πng
        
    Returns:
        True n·∫øu th√†nh c√¥ng
    """
    chat = await ChatDocument.get(session_id)
    if chat is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Chat session kh√¥ng t·ªìn t·∫°i"
        )
    
    # Ki·ªÉm tra quy·ªÅn
    if chat.user_id != user_id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a chat n√†y"
        )
    
    await chat.delete()
    return True


async def update_chat_title(
    session_id: str,
    user_id: str,
    new_title: str
) -> dict:
    """C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ chat.
    
    Args:
        session_id: ID phi√™n chat
        user_id: ID ng∆∞·ªùi d√πng
        new_title: Ti√™u ƒë·ªÅ m·ªõi
        
    Returns:
        Th√¥ng tin chat
    """
    chat = await ChatDocument.get(session_id)
    if chat is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Chat session kh√¥ng t·ªìn t·∫°i"
        )
    
    # Ki·ªÉm tra quy·ªÅn
    if chat.user_id != user_id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t chat n√†y"
        )
    
    chat.title = new_title
    chat.updated_at = datetime.now(timezone.utc)
    await chat.save()
    
    return {
        "id": str(chat.id),
        "title": chat.title,
        "updated_at": chat.updated_at
    }


async def generate_course_content(
    topic: str,
    level: str = "beginner",
    num_chapters: int = 5
) -> dict:
    """T·∫°o n·ªôi dung kh√≥a h·ªçc t·ª± ƒë·ªông b·∫±ng AI.
    
    Args:
        topic: Ch·ªß ƒë·ªÅ kh√≥a h·ªçc
        level: Tr√¨nh ƒë·ªô
        num_chapters: S·ªë ch∆∞∆°ng
        
    Returns:
        N·ªôi dung kh√≥a h·ªçc
    """
    if not settings.google_ai_api_key:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="AI service ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"
        )
    
    try:
        genai.configure(api_key=settings.google_ai_api_key)
        model = genai.GenerativeModel("gemini-1.5-flash")
        
        prompt = f"""
        T·∫°o c·∫•u tr√∫c kh√≥a h·ªçc v·ªÅ {topic} cho ng∆∞·ªùi h·ªçc ·ªü tr√¨nh ƒë·ªô {level}.
        
        Y√™u c·∫ßu:
        - T·∫°o {num_chapters} ch∆∞∆°ng h·ªçc
        - M·ªói ch∆∞∆°ng c√≥ ti√™u ƒë·ªÅ, m√¥ t·∫£, v√† n·ªôi dung chi ti·∫øt
        - ∆Ø·ªõc t√≠nh th·ªùi gian h·ªçc cho m·ªói ch∆∞∆°ng
        - Th√™m c√°c b√†i t·∫≠p th·ª±c h√†nh
        
        Tr·∫£ v·ªÅ JSON format:
        {{
          "title": "Ti√™u ƒë·ªÅ kh√≥a h·ªçc",
          "description": "M√¥ t·∫£ kh√≥a h·ªçc",
          "level": "{level}",
          "chapters": [
            {{
              "title": "T√™n ch∆∞∆°ng",
              "description": "M√¥ t·∫£ ch∆∞∆°ng",
              "duration_minutes": 60,
              "content": "N·ªôi dung chi ti·∫øt",
              "learning_objectives": ["M·ª•c ti√™u 1", "M·ª•c ti√™u 2"],
              "exercises": ["B√†i t·∫≠p 1", "B√†i t·∫≠p 2"]
            }}
          ]
        }}
        
        Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng text gi·∫£i th√≠ch.
        """
        
        response = model.generate_content(prompt)
        content_json = response.text.strip()
        
        # Parse JSON
        if content_json.startswith("```json"):
            content_json = content_json[7:-3].strip()
        elif content_json.startswith("```"):
            content_json = content_json[3:-3].strip()
        
        course_content = json.loads(content_json)
        return course_content
        
    except Exception as e:
        print(f"Error generating course content: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Kh√¥ng th·ªÉ t·∫°o n·ªôi dung kh√≥a h·ªçc"
        )


# Aliases for backward compatibility with controller
start_chat_session = create_chat_session
get_user_chat_sessions = list_user_chats
